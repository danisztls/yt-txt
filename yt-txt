#!/bin/bash
#
# Get the transcript of an Youtube video

# @author: Daniel Souza <me@posix.dev.br>
# @license: MIT
# @usage:
#   yt-txt <VIDEO_URL>
#   yt-txt -t <VIDEO_URL>
# @deps: yt-dlp, sed, awk
# @deps-optional: openai/whisper

# shellcheck disable=SC2059

WHISPER_MODEL="$HOME/.models/ggml-base.en.bin"
YT_CACHE_DIR="$XDG_CACHE_HOME/yt-txt"
YT_LANG="en"

[ -d "$YT_CACHE_DIR" ] || mkdir -p "$YT_CACHE_DIR"
cd "$YT_CACHE_DIR" || exit

url="$1"
id=${url##*v=}

# formatting escape codes
_fmt_clear="\e[0;0m"
_fmt_bold="\e[0;1m"
_fmt_muted="\e[0;2m"
_fmt_italic="\e[0;3m"
_fmt_underlined="\e[0;4m"
_fmt_black="\e[1;30m"
_fmt_red="\e[1;31m"
_fmt_green="\e[1;32m"
_fmt_yellow="\e[1;33m"
_fmt_blue="\e[1;34m"
_fmt_purple="\e[1;35m"
_fmt_cyan="\e[1;36m"
_fmt_white="\e[1;37m"

# log levels strings (systemd convention)
_log_emerg="${_fmt_red}EMERGENCY: %s${_fmt_clear}\n"
_log_alert="${_fmt_red}ALERT: %s${_fmt_clear}\n"
_log_crit="${_fmt_red}CRITICAL: %s${_fmt_clear}\n"
_log_error="${_fmt_red}ERROR: %s${_fmt_clear}\n"
_log_warning="${_fmt_yellow}WARNING: %s${_fmt_clear}\n"
_log_notice="${_fmt_bold}NOTICE: %s${_fmt_clear}\n"
_log_info="${_fmt_clear}INFO: %s\n${_fmt_clear}\n"
_log_debug="${_fmt_muted}DEBUG: %s${_fmt_clear}\n"

_get_srt() {
  local _dst="${id}.${YT_LANG}.srt"

  yt-dlp \
    "$id" \
    --ignore-config \
    --output "%(id)s.%(ext)s" \
    --skip-download \
    --sponsorblock-remove all \
    --ignore-no-formats-error \
    --write-subs \
    --write-auto-subs \
    --sub-langs "$YT_LANG" \
    --convert-subs srt |
  sed 's/\r/\n/g' > "${id}.log"

  if ! [ -f "$_dst" ]; then
    printf "$_log_warning" "Video don't have a '$YT_LANG' subtitle. Transcribing from audio..."
    return 1
  fi
}

_convert_srt_to_txt() {
  local _src="${id}.${YT_LANG}.srt"
  local _dst="${_src%.srt}.txt"

  # trim timing & line cues, silence (0-width char), replace CRLF
  sed \
    -e '/^[0-9].*[0-9]$/d' \
    -e '/^[0-9]*$/d' \
    -e 's/â€‹//g' \
    -e 's/\r/\n/g' "$_src" |

  # remove duplicate lines
  awk '!seen[$0]++' | tee "$_dst"
}

_get_audio() {
  yt-dlp \
    "$id" \
    --ignore-config \
    --output "%(id)s.%(ext)s" \
    --format ba \
    --sponsorblock-remove all \
    --ignore-no-formats-error \
    --no-write-subs |
  sed 's/\r/\n/g' >> "${id}.log"

  if ! [ -f "${id}.webm" ]; then
    printf "$_log_error" "Unable to get video WEBM audio."
    return 1
  fi

  # NOTE: What if audio input is not in WebM format?
  ffmpeg -i "${id}.webm" -ar 16000 -ac 1 -c:a pcm_s16le "${id}.wav" >> "${id}.log"

  if ! [ -f "${id}.wav" ]; then
    printf "$_log_error" "Unable to convert WEBM to WAV."
    return 1
  fi

  # remove residual
  [ -f "${id}.webm" ] && rm "${id}.webm"
}

_transcribe_audio() {
  # TODO: Try APIs
  # https://whisperapi.com/
  # https://platform.openai.com/docs/guides/speech-to-text

  whisper.cpp -m "$WHISPER_MODEL" --model base -f "${id}.wav" -otxt true -of "${id}.txt" >> "${id}.log"
  cat "${id}.txt"

  # remove residual
  [ -f "${id}.wav" ] && rm "${id}.wav"
}

if _get_srt; then
   _convert_srt_to_txt
else
  # NOTE: Some videos don't have SRT available. In such cases the audio will be transcribed.
  _get_audio && _transcribe_audio
fi
